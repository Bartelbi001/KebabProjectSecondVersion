// <auto-generated />
using System;
using KebabStoreGen2.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KebabStoreGen2.DataAccess.Migrations
{
    [DbContext(typeof(KebabStoreGen2DbContext))]
    [Migration("20241106205947_UpdateAllKebabProject")]
    partial class UpdateAllKebabProject
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KebabStoreGen2.DataAccess.Entities.IngredientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<int>("Carbs")
                        .HasColumnType("int");

                    b.Property<int>("Fat")
                        .HasColumnType("int");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<Guid?>("KebabEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Protein")
                        .HasColumnType("int");

                    b.Property<int>("WeightInGrams")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KebabEntityId");

                    b.ToTable("IngredientEntities");
                });

            modelBuilder.Entity("KebabStoreGen2.DataAccess.Entities.KebabEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("KebabDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("KebabName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Stuffing")
                        .HasColumnType("int");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Wrap")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("KebabEntities");
                });

            modelBuilder.Entity("KebabStoreGen2.DataAccess.Entities.IngredientEntity", b =>
                {
                    b.HasOne("KebabStoreGen2.DataAccess.Entities.KebabEntity", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("KebabEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KebabStoreGen2.DataAccess.Entities.KebabEntity", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
